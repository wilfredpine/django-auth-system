"""
Django settings for django_auth_system project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# ----------------------
# Debug Settings
# ----------------------
debug_env = os.getenv('DEBUG', 'false')  # Default to 'false' if DEBUG is not set
DEBUG = debug_env.lower() in ['true', '1', 'yes'] # Convert to boolean

# -------------------
# Allowed Hosts
# -------------------
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'user.apps.UserConfig',
    'dashboard.apps.DashboardConfig',
]

# -------------------
# Custom User Model
# -------------------
AUTH_USER_MODEL = 'user.CustomUser'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'user.middleware.LogIPMiddleware',
]

ROOT_URLCONF = 'django_auth_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_auth_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if os.getenv('DB_ENGINE') == 'django.db.backends.sqlite3':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('DB_ENGINE'),
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ----------------------
# AUTHENTICATION
# ----------------------
LOGIN_URL = '/user/login/'      # Redirect unauthenticated users to this URL
LOGIN_REDIRECT_URL = '/'        # Redirect to the homepage after login
LOGOUT_REDIRECT_URL = '/login'

# ----------------------
# File upload config
# ----------------------
MEDIA_URL = os.getenv('UPLOAD_DIR', default='media')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ----------------------
# Email Configuration
# ----------------------
if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT'))
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASS')

# ----------------------
# Session Configuration
# ----------------------
SESSION_COOKIE_HTTPONLY = not DEBUG  # True in Production, False in Development
SESSION_COOKIE_SECURE = not DEBUG   # True in Production, False in Development
SESSION_COOKIE_SAMESITE = 'strict' if not DEBUG else 'lax'  # strict in Production, lax in Development
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

# ----------------------
# CSRF Protection
# ----------------------
CSRF_COOKIE_HTTPONLY = not DEBUG  # True in Production, False in Development
CSRF_COOKIE_SECURE = not DEBUG   # True in Production, False in Development
CSRF_COOKIE_SAMESITE = 'strict' if not DEBUG else 'lax'  # strict in Production, lax in Development

# ----------------------
# Security Features
# ----------------------
SECURE_SSL_REDIRECT = not DEBUG  # Redirect to HTTPS in Production, not in Development
SECURE_BROWSER_XSS_FILTER = not DEBUG  # Enable XSS filter in Production, disable in Development
SECURE_CONTENT_TYPE_NOSNIFF = not DEBUG  # Prevent content type sniffing in Production
X_FRAME_OPTIONS = 'DENY' if not DEBUG else 'SAMEORIGIN'  # DENY in Production, SAMEORIGIN in Development

# ----------------------
# Proxy/Load Balancer Support
# ----------------------
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Trust reverse proxies in Production
else:
    SECURE_PROXY_SSL_HEADER = None  # No proxy configuration in Development

# ----------------------
# Logger
# ----------------------
LOGGING_DIR = os.path.join(BASE_DIR, 'logs')  # Directory where log files will be stored
if not os.path.exists(LOGGING_DIR):
    os.makedirs(LOGGING_DIR)
    
# Conditional logging level based on DEBUG value
LOGGING_LEVEL = 'DEBUG' if DEBUG else 'INFO'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Don't disable other loggers (useful for third-party apps)
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': LOGGING_LEVEL,  # Set based on DEBUG setting
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'django_debug.log'),  # Path to your log file
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': LOGGING_LEVEL,  # Set based on DEBUG setting
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file'],
            'level': 'ERROR' if DEBUG else 'WARNING',  # Errors during DEBUG, less verbose otherwise
            'propagate': False,
        },
    },
}

